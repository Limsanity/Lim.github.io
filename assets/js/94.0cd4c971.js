(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{497:function(t,e,r){"use strict";r.r(e);var a=r(46),o=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"oauth"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#oauth"}},[t._v("#")]),t._v(" OAuth")]),t._v(" "),r("h2",{attrs:{id:"流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#流程"}},[t._v("#")]),t._v(" 流程")]),t._v(" "),r("p",[t._v("四种模式：")]),t._v(" "),r("ul",[r("li",[t._v("授权码")]),t._v(" "),r("li",[t._v("隐藏式")]),t._v(" "),r("li",[t._v("密码式")]),t._v(" "),r("li",[t._v("客户端凭证")])]),t._v(" "),r("h2",{attrs:{id:"安全"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#安全"}},[t._v("#")]),t._v(" 安全")]),t._v(" "),r("h3",{attrs:{id:"关于state"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#关于state"}},[t._v("#")]),t._v(" 关于state")]),t._v(" "),r("ul",[r("li",[t._v("state的作用是防止CSRF。")]),t._v(" "),r("li",[t._v("如果没有state，攻击者A可以创建一个账号并获取code，然后把用自己的code生成一个url让用户B点击，这个时候用户B登陆的就是攻击者A的账户，B这个时候上传了一些机密文件，其实是上传到攻击者的账户中的。")]),t._v(" "),r("li",[t._v("state可以解决这个问题，用户重定向至Authorization Endpoint时为其生成一个state，拿到code后验证state是否和之前的state一致即可。")]),t._v(" "),r("li",[t._v("state可以在客户端本地生成存在cookie中，拿到code重定向至客户端服务器会带上该cookie，此时服务器再比较cookie中的state是否和url中的state一致。")]),t._v(" "),r("li",[t._v("Nuxt中如果没有显示提供state参数，将使用nanoid库生成一个state。")])]),t._v(" "),r("h3",{attrs:{id:"关于redirect-uri"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#关于redirect-uri"}},[t._v("#")]),t._v(" 关于redirect_uri")]),t._v(" "),r("ul",[r("li",[t._v("如果不指定redirect_uri，那么攻击者可以随意生成一个url，这样就能获得用户的code，从而以用户身份登陆。")])]),t._v(" "),r("h3",{attrs:{id:"为什么需要拿到code再拿token"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要拿到code再拿token"}},[t._v("#")]),t._v(" 为什么需要拿到code再拿token")]),t._v(" "),r("ul",[r("li",[t._v("拿到code之后在服务器端拿token，就能保证token不会被截获。")]),t._v(" "),r("li",[t._v("因为认证服务器通常是HTTPS的，而应用服务器不一定，因此如果直接把token通过重定向传给应用服务器的话，无法保证浏览器到应用服务器的传输过程不会截获。当服务器拿到code之后，再去找认证服务器生成token，两者传输过程基于HTTPS，因此不会被截获利用。")]),t._v(" "),r("li",[t._v("虽然code有可能被截获，但是OAuth中的code通常只会被使用一次，如果攻击者截获code请求到token，用户又通过该code请求token，那么认证服务器就会发现该code使用了两次，从而revoke掉之前发出的token。而这个过程对于用户来说结果就是登录失败，通常只需重新登录即可。")])]),t._v(" "),r("h3",{attrs:{id:"阅读"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#阅读"}},[t._v("#")]),t._v(" 阅读")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.jianshu.com/p/c7c8f51713b6",target:"_blank",rel:"noopener noreferrer"}},[t._v("针对OAuth2的CSRF攻击"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://auth.nuxtjs.org/#getting-started",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nuxt中的auth模块"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("OAuth的四种模式"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.npmjs.com/package/nanoid",target:"_blank",rel:"noopener noreferrer"}},[t._v("npm nanoid"),r("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=o.exports}}]);