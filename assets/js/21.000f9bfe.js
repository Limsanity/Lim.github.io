(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{371:function(t,a,s){t.exports=s.p+"assets/img/docker__1.a16f1584.png"},450:function(t,a,s){"use strict";s.r(a);var n=s(46),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"docker容器化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker容器化"}},[t._v("#")]),t._v(" Docker容器化")]),t._v(" "),n("h2",{attrs:{id:"nginx配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nginx配置"}},[t._v("#")]),t._v(" nginx配置")]),t._v(" "),n("p",[t._v("编写nginx配置文件")]),t._v(" "),n("ul",[n("li",[t._v("开启了gzip压缩资源，减小带快，加快资源加载")]),t._v(" "),n("li",[t._v("开启零拷贝")]),t._v(" "),n("li",[t._v("静态资源响应")]),t._v(" "),n("li",[t._v("api请求转发")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('# 开启gzip\ngzip on;\n\n# 启用gzip压缩的最小文件，小于设置值的文件将不会压缩\ngzip_min_length 1k;\n\n# gzip 压缩级别，1-10，数字越大压缩的越好，也越占用CPU时间，后面会有详细说明\ngzip_comp_level 2;\n\n# 进行压缩的文件类型。javascript有多种形式。其中的值可以在 mime.types 文件中找到。\ngzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript image/jpeg image/gif image/png;\n\n# 是否在http header中添加Vary: Accept-Encoding，建议开启\ngzip_vary on;\n\n# 禁用IE 6 gzip\ngzip_disable "MSIE [1-6]\\.";\n\nserver {\n  # 监听80端口\n  listen       80;\n  server_name  localhost;\n\n  # 开启零拷贝\n  sendfile     on;\n\n  # 将请求代理至指定地址的3000端口，该koaserver变量将在docker-compose.yml文件指定\n  location / {\n    proxy_pass http://koaserver:3000;\n  }\n\n  # 将路径包含/static/的请求用/app/static/下的资源进行响应\n  # 例如http://localhost/static/vendor.js 将 变成http://localhost/app/static/vendor.js\n  location /static/ {\n    alias /app/static/;\n    expires 7d;\n  }\n\n  # 代理api请求\n  # 例如http://localhost/api/user 将被代理至 http://host.docker.internal:4000/user\n  # host.docker.internal为mac中docker的宿主机地址\n  location ^~/api/ {\n    rewrite ^/api/(.*)$ /$1 break;\n    proxy_pass http://host.docker.internal:4000;\n  }\n\n  location = /50x.html {\n    root   /usr/share/nginx/html;\n  }\n}\n\n')])])]),n("p",[t._v("编写nginx环境的container相关Dockerfile：")]),t._v(" "),n("ul",[n("li",[t._v("获取nginx镜像")]),t._v(" "),n("li",[t._v("将项目中打包好的dist文件夹拷贝到容器中的app文件夹中（因此nginx配置文件的静态资源路径是/app/static/）")]),t._v(" "),n("li",[t._v("拷贝nginx配置文件")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FROM")]),t._v(" nginx\n"),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("COPY")]),t._v(" dist"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("app\n"),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("COPY")]),t._v(" nginx"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("conf "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("etc"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("nginx"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("conf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("d"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("conf\n\n")])])]),n("h2",{attrs:{id:"node服务端配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#node服务端配置"}},[t._v("#")]),t._v(" node服务端配置")]),t._v(" "),n("p",[t._v("因为项目中采用的是服务端渲染技术，即要在客户端和api服务器之间设置一个node中间层进行页面请求的响应，因此要启一个node服务，和往常SPA不同，SPA只要用nginx环境代理即可。")]),t._v(" "),n("p",[t._v("Dockerfile配置")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FROM")]),t._v(" node\n"),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("COPY")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("app\n")])])]),n("h2",{attrs:{id:"docker-compose-yml配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-yml配置"}},[t._v("#")]),t._v(" docker-compose.yml配置")]),t._v(" "),n("p",[t._v("配置文件指明启动两个容器，每个容器有各自的Dockerfile，当我们访问localhost:3000端口将会访问到nginx容器中的80端口，而我的配置文件将80端口的请求转发到koaserver:3000，其中koaserver链接到了node容器中，即指向node容器的地址。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("version"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),t._v("\n\nservices"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  nginx"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    build"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      context"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n      dockerfile"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" nginx"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Dockerfile\n    ports"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n    links"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" web"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("koaserver\n  web"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    build"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      context"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n      dockerfile"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" server"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Dockerfile\n    working_dir"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("app\n    command"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"start"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n")])])]),n("h2",{attrs:{id:"启动"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#启动"}},[t._v("#")]),t._v(" 启动")]),t._v(" "),n("p",[t._v("在package.json中添加一下字段，方便后续打包和快速启动docker")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"script"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"build:docker"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"docker-compose up --build"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"docker"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"docker-compose up"')]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("在cmd中输入:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("npm run build:docker\n")])])]),n("p",[t._v("即可构建和启动docker。")]),t._v(" "),n("p",[t._v("启动成功后，浏览器进入localhost:3000，看到一下页面：")]),t._v(" "),n("p",[n("img",{attrs:{src:s(371),alt:""}})]),t._v(" "),n("h2",{attrs:{id:"最后"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#最后"}},[t._v("#")]),t._v(" 最后")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/earnsparemoney/frontend",target:"_blank",rel:"noopener noreferrer"}},[t._v("相关项目地址"),n("OutboundLink")],1)]),t._v(" "),n("h4",{attrs:{id:"docker常用命令记录"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker常用命令记录"}},[t._v("#")]),t._v(" Docker常用命令记录")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors",target:"_blank",rel:"noopener noreferrer"}},[t._v("阿里云镜像"),n("OutboundLink")],1),t._v(": 加速镜像下载")]),t._v(" "),n("li",[t._v("docker stop $(docker ps -a -q): 停止所有container")]),t._v(" "),n("li",[t._v("docker rm $(docker ps -a -q): 删除所有container")]),t._v(" "),n("li",[t._v("docker rmi $(docker images -q): 删除所有image")])])])}),[],!1,null,null,null);a.default=r.exports}}]);