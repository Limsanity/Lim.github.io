(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{475:function(t,v,_){"use strict";_.r(v);var e=_(46),r=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"浏览器进程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#浏览器进程"}},[t._v("#")]),t._v(" 浏览器进程")]),t._v(" "),_("p",[t._v("Browser进程：只有一个")]),t._v(" "),_("ul",[_("li",[t._v("负责浏览器界面显示、用户交互。例如：前进、后退")]),t._v(" "),_("li",[t._v("负责各个页面的管理，创建和销毁其他进程")]),t._v(" "),_("li",[t._v("网络资源管理。例如下载")])]),t._v(" "),_("p",[t._v("GPU进程：一个")]),t._v(" "),_("ul",[_("li",[t._v("用于3D绘制等")])]),t._v(" "),_("p",[t._v("浏览器渲染进程（Renderer进程）")]),t._v(" "),_("ul",[_("li",[t._v("内部是多线程的，即每个tab页所拥有的进程")]),t._v(" "),_("li",[t._v("负责页面渲染、脚本执行、事件处理等")])]),t._v(" "),_("p",[t._v("第三方插件进程：每种类型的插件对应一个进程")]),t._v(" "),_("h2",{attrs:{id:"浏览器渲染进程-浏览器内核"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#浏览器渲染进程-浏览器内核"}},[t._v("#")]),t._v(" 浏览器渲染进程（浏览器内核）")]),t._v(" "),_("p",[t._v("图形用户界面GUI渲染线程")]),t._v(" "),_("ul",[_("li",[t._v("负责浏览器界面，包括解析HTML、CSS、构建DOM树、Render树、布局和绘制等")]),t._v(" "),_("li",[t._v("重绘或回流时由该线程负责")])]),t._v(" "),_("p",[t._v("JS引擎线程")]),t._v(" "),_("ul",[_("li",[t._v("负责处理执行js脚本")]),t._v(" "),_("li",[t._v("等待任务队列的任务到来并执行")]),t._v(" "),_("li",[t._v("任务队列分为宏任务和微任务，其中微任务队列只有一个")]),t._v(" "),_("li",[t._v("浏览器只有一个js引擎")])]),t._v(" "),_("p",[t._v("事件触发线程")]),t._v(" "),_("ul",[_("li",[t._v("归属于浏览器")]),t._v(" "),_("li",[t._v("回调函数（setTimeout、鼠标点击、ajax异步请求指定的函数）添加到事件线程中")]),t._v(" "),_("li",[t._v("当事件符合触发条件时，该线程把事件添加到任务队列队尾，等待js引擎处理")])]),t._v(" "),_("p",[t._v("定时触发器线程")]),t._v(" "),_("ul",[_("li",[t._v("setInterval与setTimeout所在进程")]),t._v(" "),_("li",[t._v("定时计时器并不是由js引擎计时的，因为js引擎是单线程的，当引擎处于堵塞状态，会影响计时的准确")]),t._v(" "),_("li",[t._v("计时完成被触发，事件会添加到任务队列队尾")]),t._v(" "),_("li",[t._v("W3C规定，setTimeout中低于4ms的时间间隔算为4ms")])]),t._v(" "),_("p",[t._v("异步HTTP请求线程")]),t._v(" "),_("ul",[_("li",[t._v("在XMLHttpRequest在连接后新启动的一个线程")]),t._v(" "),_("li",[t._v("线程检测到请求的状态变更后，会将回调函数添加到任务队列")])]),t._v(" "),_("h2",{attrs:{id:"为什么js引擎是单线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么js引擎是单线程"}},[t._v("#")]),t._v(" 为什么JS引擎是单线程")]),t._v(" "),_("h2",{attrs:{id:"浏览器内核中线程之间的关系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#浏览器内核中线程之间的关系"}},[t._v("#")]),t._v(" 浏览器内核中线程之间的关系")]),t._v(" "),_("h3",{attrs:{id:"gui渲染线程与js引擎线程互斥"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#gui渲染线程与js引擎线程互斥"}},[t._v("#")]),t._v(" GUI渲染线程与JS引擎线程互斥")]),t._v(" "),_("p",[t._v("JS引擎可以修改DOM树，如果GUI线程在同时渲染页面，就会导致渲染线程获取的DOM元素信息和JS引擎操作DOM后的不一致。为了防止这种现象，GUI线程和JS引擎线程设计为互斥关系，当JS引擎执行时，GUI的渲染会被保存在一个队列中，等待JS引擎空闲时才进行渲染。因此要避免CPU密集型的计算，否则JS引擎阻塞，会导致渲染进程不能执行渲染。例如：")]),t._v(" "),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),_("p",[t._v("会看到alert弹窗不会出现，就是因为js引擎陷入死循环，渲染引擎无法渲染。")]),t._v(" "),_("h2",{attrs:{id:"webworker"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#webworker"}},[t._v("#")]),t._v(" WebWorker")]),t._v(" "),_("p",[t._v("Web Workers 使得一个Web应用程序可以在与主执行线程分离的后台线程中运行一个脚本操作。这样做的好处是可以在一个单独的线程中执行费时的处理任务，从而允许主（通常是UI）线程运行而不被阻塞/放慢。")]),t._v(" "),_("ul",[_("li",[t._v("WebWorker可以向浏览器申请一个子线程，该子线程服务于主线程，受主线程控制")]),t._v(" "),_("li",[t._v("JS引擎线程与worker线程通过postMessage API进行通信")])]),t._v(" "),_("p",[t._v("SharedWorker和WebWorker类似，区别在于SharedWorker被所有Renderer进程所共享，只有一个SharedWorker进程。")]),t._v(" "),_("h2",{attrs:{id:"浏览器的渲染流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的渲染流程"}},[t._v("#")]),t._v(" 浏览器的渲染流程")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("浏览器输入url，浏览器主进程接管，开启一个下载线程")])]),t._v(" "),_("li",[_("p",[t._v("DNS查询，3次握手，建立连接，开始下载响应报文")])]),t._v(" "),_("li",[_("p",[t._v("将下载完的内容转交给Renderer进程")])]),t._v(" "),_("li",[_("p",[t._v("解析html，生成DOM树")])]),t._v(" "),_("li",[_("p",[t._v("解析CSS规则，生成CSSOM树")])]),t._v(" "),_("li",[_("p",[t._v("根据DOM树和CSSOM树生成Render树")])]),t._v(" "),_("li",[_("p",[t._v("根据Render树进行layout，负责元素节点的尺寸、位置计算")])]),t._v(" "),_("li",[_("p",[t._v("绘制Render树，绘制页面像素信息")])]),t._v(" "),_("li",[_("p",[t._v("浏览器将各层的信息发给GPU，GPU将各层合成，显示在屏幕")])])]),t._v(" "),_("p",[t._v("DOMContentLoaded事件触发时，仅当DOM加载完成，不包括样式表和图片")]),t._v(" "),_("p",[t._v("onLoad事件触发时，页面上所有DOM、样式表、脚本和图片都已经加载完成")]),t._v(" "),_("p",[t._v("参考："),_("a",{attrs:{href:"https://segmentfault.com/a/1190000013083967",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://segmentfault.com/a/1190000013083967"),_("OutboundLink")],1)])])}),[],!1,null,null,null);v.default=r.exports}}]);